# 케어온(CareOn) 프로젝트 POD (Project Overview Document)

## 1. 프로젝트 개요

### 1.1 프로젝트명

- **케어온 (CareOn)** - B2B 종합 렌탈 플랫폼

### 1.2 프로젝트 목표

- 프랜차이즈 창업자와 자영업자를 위한 종합 렌탈 서비스 플랫폼 구축
- "렌탈이 아닌, 매출을 만들어드립니다"라는 가치 제안 실현
- 아정당(B2C) 모델을 벤치마킹하여 B2B에 최적화된 플랫폼 개발

### 1.3 핵심 차별점

- **매출 증대 파트너**: 단순 장비 공급이 아닌 비즈니스 성장 파트너
- **원스톱 솔루션**: 매장 운영에 필요한 모든 장비를 통합 제공
- **맞춤형 견적**: 업종별, 규모별 최적화된 패키지 제안

### 1.4 타겟 사용자

- **주요**: 프랜차이즈 가맹점주 (신규 창업자)
- **업종**: 요식업, 카페, 미용실, 편의점 등
- **규모**: 소규모(50㎡) ~ 대형(200㎡+)

## 2. 기술 스택 및 아키텍처

### 2.1 Frontend

- **Framework**: Next.js 14+ (App Router)
- **Language**: TypeScript (strict mode)
- **Styling**: Tailwind CSS + Shadcn UI
- **State Management**: Zustand
- **Form Handling**: React Hook Form + Zod
- **API Client**: Axios + React Query (TanStack Query)
- **Animation**: Framer Motion

### 2.2 Backend (추후 구현)

- **Runtime**: Node.js 18+
- **Framework**: NestJS or Express
- **Database**: PostgreSQL + Prisma ORM
- **Cache**: Redis
- **File Storage**: AWS S3 or Cloudinary

### 2.3 DevOps & Infrastructure

- **Version Control**: Git (GitHub)
- **CI/CD**: GitHub Actions
- **Hosting**: Vercel (Frontend)
- **Monitoring**: Sentry, Google Analytics
- **Container**: Docker (개발 환경)

### 2.4 개발 도구

- **Package Manager**: npm
- **Code Editor**: VS Code / Cursor
- **API Testing**: Postman / Thunder Client
- **Design**: Figma (UI/UX)

## 3. 프로젝트 구조

### 3.1 디렉토리 구조

```
careon-platform/
├── apps/
│   └── web/                    # Next.js 웹 애플리케이션
│       ├── app/                # App Router 페이지
│       ├── components/         # React 컴포넌트
│       ├── lib/               # 유틸리티 및 헬퍼
│       ├── hooks/             # Custom React Hooks
│       ├── stores/            # Zustand stores
│       ├── types/             # TypeScript 타입 정의
│       ├── styles/            # 글로벌 스타일
│       └── public/            # 정적 파일
├── packages/
│   ├── ui/                    # 공통 UI 컴포넌트
│   ├── utils/                 # 공통 유틸리티
│   └── config/                # 공통 설정
├── docs/                      # 프로젝트 문서
└── scripts/                   # 빌드 및 배포 스크립트
```

### 3.2 모듈 구조

```
Core Modules:
├── auth/                      # 인증 및 권한
├── api/                       # API 클라이언트
├── config/                    # 환경 설정
└── utils/                     # 공통 유틸리티

Feature Modules:
├── products/                  # 상품 관리
├── quotes/                    # 견적 관리
├── contracts/                 # 계약 관리
├── partners/                  # 파트너 관리
├── billing/                   # 결제/청구
└── analytics/                 # 분석/리포트

UI Modules:
├── layout/                    # 레이아웃 컴포넌트
├── common/                    # 공통 컴포넌트
├── forms/                     # 폼 컴포넌트
└── feedback/                  # 피드백 UI
```

## 4. 개발 환경 설정

### 4.1 필수 요구사항

- **Node.js**: 18.17.0 이상
- **npm**: 9.0.0 이상
- **Git**: 2.30.0 이상

### 4.2 환경 변수

```env
# .env.local
NEXT_PUBLIC_API_URL=http://localhost:3000/api
NEXT_PUBLIC_SITE_URL=http://localhost:3000
NEXT_PUBLIC_GA_ID=
NEXT_PUBLIC_SENTRY_DSN=

# 인증
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=

# 외부 서비스
DATABASE_URL=
REDIS_URL=
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=ap-northeast-2
```

### 4.3 개발 도구 설정

```json
// .vscode/settings.json
{
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "typescript.tsdk": "node_modules/typescript/lib"
}
```

## 5. 코딩 컨벤션

### 5.1 네이밍 규칙

- **파일명**: kebab-case (예: `user-service.ts`, `product-card.tsx`)
- **컴포넌트**: PascalCase (예: `ProductCard`, `QuoteBuilder`)
- **함수/변수**: camelCase (예: `getUserData`, `isLoading`)
- **상수**: UPPER_SNAKE_CASE (예: `MAX_RETRY_COUNT`)
- **타입/인터페이스**: PascalCase with 'I' prefix (예: `IUser`, `IProduct`)

### 5.2 디렉토리 규칙

- **pages**: 라우트별 페이지 컴포넌트
- **components**: 재사용 가능한 UI 컴포넌트
- **lib**: 비즈니스 로직 및 유틸리티
- **hooks**: Custom React Hooks
- **types**: TypeScript 타입 정의

### 5.3 코드 스타일

- **들여쓰기**: 2 spaces
- **세미콜론**: 필수
- **따옴표**: Single quotes for imports, double quotes for strings
- **컴포넌트**: 함수형 컴포넌트 + TypeScript

## 6. 주요 의존성 및 버전

### 6.1 Core Dependencies

```json
{
  "next": "^14.2.0",
  "react": "^18.3.0",
  "react-dom": "^18.3.0",
  "typescript": "^5.4.0"
}
```

### 6.2 UI/Styling

```json
{
  "tailwindcss": "^3.4.0",
  "@radix-ui/react-*": "latest",
  "class-variance-authority": "^0.7.0",
  "clsx": "^2.1.0",
  "framer-motion": "^11.0.0"
}
```

### 6.3 State & Data

```json
{
  "zustand": "^4.5.0",
  "@tanstack/react-query": "^5.0.0",
  "axios": "^1.6.0",
  "react-hook-form": "^7.50.0",
  "zod": "^3.22.0"
}
```

### 6.4 Development

```json
{
  "@types/node": "^20.0.0",
  "@types/react": "^18.3.0",
  "eslint": "^8.57.0",
  "eslint-config-next": "^14.2.0",
  "prettier": "^3.2.0",
  "husky": "^9.0.0",
  "lint-staged": "^15.0.0"
}
```

## 7. 빌드 및 배포 전략

### 7.1 브랜치 전략

- **main**: 프로덕션 배포
- **develop**: 개발 통합
- **feature/***: 기능 개발
- **hotfix/***: 긴급 수정

### 7.2 배포 파이프라인

1. **개발**: feature → develop (PR + Code Review)
2. **스테이징**: develop → staging (자동 배포)
3. **프로덕션**: staging → main (수동 승인)

### 7.3 배포 체크리스트

- [ ]  TypeScript 컴파일 에러 없음
- [ ]  ESLint 경고/에러 없음
- [ ]  모든 테스트 통과
- [ ]  빌드 성공
- [ ]  Lighthouse 점수 90+ (Performance)
- [ ]  환경 변수 설정 확인

## 8. 개발 일정 및 마일스톤

### Phase 1: 기초 설정 (1주)

- [X]  프로젝트 설계 및 POD 작성
- [ ]  Next.js 프로젝트 초기 설정
- [ ]  개발 환경 구성
- [ ]  UI 컴포넌트 라이브러리 설정

### Phase 2: 핵심 기능 개발 (3주)

- [ ]  인증 시스템 (사업자 회원가입/로그인)
- [ ]  상품 카탈로그 및 상세 페이지
- [ ]  견적 생성 시스템
- [ ]  대시보드 기본 구현

### Phase 3: 비즈니스 기능 (2주)

- [ ]  계약 관리 시스템
- [ ]  파트너 관리
- [ ]  결제/청구 시스템
- [ ]  리포트 및 분석

### Phase 4: 최적화 및 출시 준비 (1주)

- [ ]  성능 최적화
- [ ]  SEO 최적화
- [ ]  보안 점검
- [ ]  사용자 테스트

## 9. 성공 지표 (KPI)

### 9.1 기술적 지표

- **페이지 로드 시간**: < 2초
- **Lighthouse 점수**: 90+ (모든 카테고리)
- **코드 커버리지**: 80% 이상
- **빌드 시간**: < 3분

### 9.2 비즈니스 지표

- **월간 활성 사용자**: 1,000+ (3개월 내)
- **견적 전환율**: 30% 이상
- **평균 계약 가치**: 월 50만원 이상
- **고객 만족도**: 4.5/5.0 이상

## 10. 리스크 관리

### 10.1 기술적 리스크

- **성능 이슈**: 초기부터 최적화 고려
- **확장성**: 모듈화된 아키텍처 유지
- **보안**: OWASP Top 10 준수

### 10.2 비즈니스 리스크

- **경쟁사 대응**: 차별화된 가치 제안 강화
- **규제 변화**: 법무 검토 정기 실시
- **시장 변화**: 애자일 개발로 빠른 대응

---
# 케어온 모듈 정의서 (Module Definition Document)

## 1. Core Modules

### 1.1 Auth Module (`@careon/auth`)

#### 목적

사용자 인증, 권한 관리, 세션 처리를 담당하는 핵심 모듈

#### 주요 기능

- 사업자 회원가입/로그인
- JWT 토큰 관리
- 권한 기반 접근 제어 (RBAC)
- 세션 관리

#### 인터페이스

```typescript
// hooks/useAuth.ts
export interface IAuthContext {
  user: IUser | null;
  isLoading: boolean;
  isAuthenticated: boolean;
  login: (credentials: ILoginCredentials) => Promise<void>;
  logout: () => Promise<void>;
  register: (data: IRegisterData) => Promise<void>;
  verifyBusiness: (businessNumber: string) => Promise<IBusinessVerification>;
}

// types/auth.types.ts
export interface ILoginCredentials {
  email: string;
  password: string;
}

export interface IRegisterData {
  email: string;
  password: string;
  businessName: string;
  businessNumber: string;
  contactName: string;
  contactPhone: string;
}

export interface IBusinessVerification {
  isValid: boolean;
  businessName?: string;
  businessType?: string;
  status?: string;
}
```

#### 의존성

- `next-auth`: 인증 프레임워크
- `jsonwebtoken`: JWT 토큰 처리
- `bcryptjs`: 비밀번호 암호화

### 1.2 API Module (`@careon/api`)

#### 목적

모든 API 통신을 중앙화하고 표준화하는 모듈

#### 주요 기능

- HTTP 클라이언트 설정
- 요청/응답 인터셉터
- 에러 핸들링
- API 엔드포인트 관리

#### 인터페이스

```typescript
// client/api-client.ts
export class ApiClient {
  constructor(config: IApiConfig);
  
  get<T>(url: string, config?: IRequestConfig): Promise<T>;
  post<T>(url: string, data?: any, config?: IRequestConfig): Promise<T>;
  put<T>(url: string, data?: any, config?: IRequestConfig): Promise<T>;
  delete<T>(url: string, config?: IRequestConfig): Promise<T>;
}

// types/api.types.ts
export interface IApiConfig {
  baseURL: string;
  timeout?: number;
  headers?: Record<string, string>;
}

export interface IApiResponse<T> {
  data: T;
  status: number;
  message?: string;
}

export interface IApiError {
  code: string;
  message: string;
  details?: any;
}
```

#### 의존성

- `axios`: HTTP 클라이언트
- `@tanstack/react-query`: 데이터 페칭 및 캐싱

### 1.3 Utils Module (`@careon/utils`)

#### 목적

프로젝트 전반에서 사용되는 유틸리티 함수 모음

#### 주요 기능

- 날짜/시간 포맷팅
- 숫자/통화 포맷팅
- 유효성 검사
- 문자열 처리

#### 인터페이스

```typescript
// formatters/currency.ts
export function formatCurrency(amount: number, currency?: string): string;
export function parseCurrency(value: string): number;

// formatters/date.ts
export function formatDate(date: Date | string, format?: string): string;
export function parseDate(dateString: string): Date;

// validators/business.ts
export function validateBusinessNumber(businessNumber: string): boolean;
export function validatePhoneNumber(phoneNumber: string): boolean;
export function validateEmail(email: string): boolean;
```

#### 의존성

- `date-fns`: 날짜 처리
- `numeral`: 숫자 포맷팅

## 2. Feature Modules

### 2.1 Products Module (`@careon/products`)

#### 목적

상품 카탈로그, 검색, 필터링, 상세 정보 관리

#### 주요 기능

- 상품 목록 조회
- 카테고리별 필터링
- 상품 검색
- 상품 상세 정보
- 렌탈 플랜 관리

#### 인터페이스

```typescript
// services/product.service.ts
export interface IProductService {
  getProducts(params?: IProductParams): Promise<IPaginatedResponse<IProduct>>;
  getProductById(id: string): Promise<IProduct>;
  getCategories(): Promise<ICategory[]>;
  searchProducts(query: string): Promise<IProduct[]>;
  getRecommendedProducts(userId?: string): Promise<IProduct[]>;
}

// hooks/useProducts.ts
export function useProducts(params?: IProductParams);
export function useProduct(id: string);
export function useCategories();
export function useProductSearch(query: string);
```

#### 의존성

- `@careon/api`: API 통신
- `@careon/utils`: 데이터 포맷팅

### 2.2 Quotes Module (`@careon/quotes`)

#### 목적

견적 생성, 관리, 승인 프로세스 처리

#### 주요 기능

- 견적 생성/수정
- 견적 아이템 관리
- 견적서 PDF 생성
- 견적 승인 워크플로우

#### 인터페이스

```typescript
// services/quote.service.ts
export interface IQuoteService {
  createQuote(data: ICreateQuoteData): Promise<IQuote>;
  updateQuote(id: string, data: Partial<IQuote>): Promise<IQuote>;
  getQuotes(userId: string): Promise<IQuote[]>;
  getQuoteById(id: string): Promise<IQuote>;
  generatePDF(id: string): Promise<Blob>;
  sendQuote(id: string, email: string): Promise<void>;
}

// stores/quote.store.ts
export interface IQuoteStore {
  currentQuote: IQuote | null;
  items: IQuoteItem[];
  addItem(item: IQuoteItem): void;
  removeItem(productId: string): void;
  updateItem(productId: string, updates: Partial<IQuoteItem>): void;
  calculateTotal(): IQuoteSummary;
  reset(): void;
}
```

#### 의존성

- `@careon/products`: 상품 정보
- `@careon/api`: API 통신
- `jspdf`: PDF 생성

### 2.3 Contracts Module (`@careon/contracts`)

#### 목적

계약 생성, 관리, 전자 서명 처리

#### 주요 기능

- 계약서 생성
- 전자 서명
- 계약 상태 관리
- 계약 문서 관리

#### 인터페이스

```typescript
// services/contract.service.ts
export interface IContractService {
  createContract(quoteId: string): Promise<IContract>;
  getContracts(userId: string): Promise<IContract[]>;
  getContractById(id: string): Promise<IContract>;
  signContract(id: string, signature: ISignature): Promise<IContract>;
  terminateContract(id: string, reason: string): Promise<void>;
}

// types/contract.types.ts
export interface IContract {
  id: string;
  quoteId: string;
  userId: string;
  status: ContractStatus;
  startDate: Date;
  endDate: Date;
  terms: IContractTerms;
  documents: IContractDocument[];
  signatures: ISignature[];
}
```

#### 의존성

- `@careon/quotes`: 견적 정보
- `@careon/api`: API 통신

## 3. UI Modules

### 3.1 UI Components (`@careon/ui`)

#### 목적

재사용 가능한 UI 컴포넌트 라이브러리

#### 주요 컴포넌트

```typescript
// 기본 컴포넌트
export { Button } from './button';
export { Input } from './input';
export { Select } from './select';
export { Checkbox } from './checkbox';
export { Radio } from './radio';

// 레이아웃 컴포넌트
export { Card } from './card';
export { Dialog } from './dialog';
export { Drawer } from './drawer';
export { Tabs } from './tabs';

// 피드백 컴포넌트
export { Alert } from './alert';
export { Toast } from './toast';
export { Skeleton } from './skeleton';
export { Spinner } from './spinner';

// 데이터 표시
export { Table } from './table';
export { Pagination } from './pagination';
export { Badge } from './badge';
export { Avatar } from './avatar';
```

#### 의존성

- `@radix-ui/react-*`: Headless UI 컴포넌트
- `tailwindcss`: 스타일링
- `class-variance-authority`: 컴포넌트 변형 관리

### 3.2 Layout Module (`@careon/layout`)

#### 목적

애플리케이션 레이아웃 및 네비게이션 관리

#### 주요 컴포넌트

```typescript
// components/layout/
export { Header } from './header';
export { Footer } from './footer';
export { Sidebar } from './sidebar';
export { Navigation } from './navigation';
export { MobileMenu } from './mobile-menu';
export { Breadcrumb } from './breadcrumb';
```

#### 의존성

- `@careon/ui`: UI 컴포넌트
- `@careon/auth`: 인증 상태

## 4. 모듈 간 의존성 다이어그램

```mermaid
graph TD
    A[App] --> B[Feature Modules]
    A --> C[Core Modules]
    A --> D[UI Modules]
  
    B --> C
    B --> D
  
    B1[Products] --> C1[API]
    B1 --> C2[Utils]
  
    B2[Quotes] --> B1
    B2 --> C1
  
    B3[Contracts] --> B2
    B3 --> C1
  
    C1 --> C3[Auth]
  
    D1[UI Components] --> C2
    D2[Layout] --> D1
    D2 --> C3
```

## 5. 모듈 설치 및 설정

### 5.1 패키지 구조

```bash
# Monorepo 구조 (선택사항)
careon/
├── apps/
│   └── web/              # Next.js 애플리케이션
├── packages/
│   ├── auth/            # @careon/auth
│   ├── api/             # @careon/api
│   ├── utils/           # @careon/utils
│   ├── products/        # @careon/products
│   ├── quotes/          # @careon/quotes
│   ├── contracts/       # @careon/contracts
│   ├── ui/              # @careon/ui
│   └── layout/          # @careon/layout
└── package.json
```

### 5.2 모듈 초기화 스크립트

```json
// package.json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit",
    "format": "prettier --write .",
    "prepare": "husky install"
  }
}
```
# 케어온 환경 설정 가이드 (Environment Setup Guide)

## 1. 프로젝트 초기화 명령어

```bash
# 프로젝트 디렉토리 생성
mkdir careon-platform && cd careon-platform

# Next.js 프로젝트 생성 (TypeScript, ESLint, Tailwind CSS 포함)
npx create-next-app@latest . --typescript --tailwind --eslint --app --src-dir=false --import-alias="@/*"

# 추가 의존성 설치
npm install axios @tanstack/react-query zustand react-hook-form zod
npm install @radix-ui/react-dialog @radix-ui/react-dropdown-menu @radix-ui/react-tabs
npm install class-variance-authority clsx tailwind-merge
npm install date-fns numeral
npm install framer-motion

# 개발 의존성 설치
npm install -D @types/node prettier eslint-config-prettier husky lint-staged
npm install -D @typescript-eslint/parser @typescript-eslint/eslint-plugin
```

## 2. 설정 파일

### 2.1 TypeScript 설정 (`tsconfig.json`)

```json
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"],
      "@/components/*": ["./components/*"],
      "@/lib/*": ["./lib/*"],
      "@/hooks/*": ["./hooks/*"],
      "@/stores/*": ["./stores/*"],
      "@/types/*": ["./types/*"],
      "@/utils/*": ["./utils/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

### 2.2 ESLint 설정 (`.eslintrc.json`)

```json
{
  "extends": [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint"],
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "react/display-name": "off",
    "react-hooks/exhaustive-deps": "warn"
  }
}
```

### 2.3 Prettier 설정 (`.prettierrc`)

```json
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "arrowParens": "always",
  "endOfLine": "lf"
}
```

### 2.4 Tailwind CSS 설정 (`tailwind.config.ts`)

```typescript
import type { Config } from 'tailwindcss';

const config: Config = {
  darkMode: ['class'],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
};

export default config;
```

### 2.5 환경 변수 (`.env.local`)

```bash
# Application
NEXT_PUBLIC_APP_NAME="케어온"
NEXT_PUBLIC_APP_URL="http://localhost:3000"

# API
NEXT_PUBLIC_API_URL="http://localhost:3000/api"
API_TIMEOUT=30000

# Authentication
NEXTAUTH_URL="http://localhost:3000"
NEXTAUTH_SECRET="your-secret-key-here"
JWT_SECRET="your-jwt-secret-here"

# Database (추후 설정)
DATABASE_URL="postgresql://user:password@localhost:5432/careon"

# External Services
# 사업자등록 진위확인 API
BUSINESS_VERIFY_API_KEY=""
BUSINESS_VERIFY_API_URL=""

# AWS S3 (파일 업로드)
AWS_ACCESS_KEY_ID=""
AWS_SECRET_ACCESS_KEY=""
AWS_REGION="ap-northeast-2"
AWS_S3_BUCKET=""

# Email Service
SMTP_HOST=""
SMTP_PORT=""
SMTP_USER=""
SMTP_PASSWORD=""
SMTP_FROM=""

# Analytics
NEXT_PUBLIC_GA_ID=""
NEXT_PUBLIC_HOTJAR_ID=""

# Sentry (에러 모니터링)
NEXT_PUBLIC_SENTRY_DSN=""
SENTRY_AUTH_TOKEN=""

# Feature Flags
NEXT_PUBLIC_ENABLE_MOCK_API="true"
NEXT_PUBLIC_ENABLE_ANALYTICS="false"
```

### 2.6 Git 설정 (`.gitignore`)

```gitignore
# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# IDE
.idea
.vscode/*
!.vscode/extensions.json
!.vscode/settings.json

# OS
Thumbs.db
```

### 2.7 VS Code 설정 (`.vscode/settings.json`)

```json
{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true,
    "source.organizeImports": true
  },
  "typescript.tsdk": "node_modules/typescript/lib",
  "typescript.enablePromptUseWorkspaceTsdk": true,
  "tailwindCSS.experimental.classRegex": [
    ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
    ["cx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"]
  ],
  "files.associations": {
    "*.css": "tailwindcss"
  }
}
```

### 2.8 Husky & Lint-staged 설정

```bash
# Husky 초기화
npx husky-init && npm install

# pre-commit hook 설정
npx husky add .husky/pre-commit "npx lint-staged"
```

**`.lintstagedrc.json`**

```json
{
  "*.{js,jsx,ts,tsx}": [
    "eslint --fix",
    "prettier --write"
  ],
  "*.{json,md,mdx,css,scss}": [
    "prettier --write"
  ]
}
```

## 3. 프로젝트 구조 생성 스크립트

```bash
#!/bin/bash
# setup-project-structure.sh

# Create directories
mkdir -p app/{(auth)/{login,register},{(dashboard)/{quotes,contracts,billing},products,solutions,partners,support}
mkdir -p components/{common,layout,product,business,ui}
mkdir -p lib/{api,utils,config}
mkdir -p hooks
mkdir -p stores
mkdir -p types
mkdir -p styles
mkdir -p public/{images,fonts}

# Create base files
touch app/layout.tsx
touch app/page.tsx
touch app/globals.css
touch lib/utils.ts
touch types/index.ts

echo "✅ 프로젝트 구조가 생성되었습니다!"
```

## 4. 개발 서버 실행

```bash
# 개발 서버 시작
npm run dev

# 타입 체크
npm run type-check

# 린트 실행
npm run lint

# 포맷팅
npm run format

# 빌드
npm run build
```

## 5. 추가 설정 (선택사항)

### 5.1 Docker 설정 (`Dockerfile`)

```dockerfile
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

COPY package.json package-lock.json ./
RUN npm ci

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

RUN npm run build

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000

CMD ["node", "server.js"]
```

### 5.2 GitHub Actions (`.github/workflows/ci.yml`)

```yaml
name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run linter
        run: npm run lint

      - name: Run build
        run: npm run build
```

---

**문서 버전**: 1.0.0
**작성일**: 2024-12-28
**작성자**: 케어온 개발팀